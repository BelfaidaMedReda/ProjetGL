// Grenoble INP - Ensimag projet GL -*- mode: java -*-
// Library for class Math of Deca, coded in Deca

class Math {

    float _power(float base, int exp) {
        float res = 1;
        int i = 0;

        while (i < exp) {
            res = res*base;
            i = i + 1;
        }

        if (exp < 0) {
            res = 1/res;
        }

        return res;
    }

    float _factorial(int n) {
        float res = 1;
        int i = 1;

        while (i <= n) {
            res = res*i;
            i = i + 1;
        }

        return res;
    }

    float _factOdd(int n) {
        float res = 1;
        int i = 1;

        while (i <= n) {
            res = res * (2*i - 1);
            i = i + 1;
        }

        return res;
    }

    float _factEven(int n) {
        float res = 1;
        int i = 1;

        while (i <= n) {
            res = res * (2*i);
            i = i + 1;
        }

        return res;
    }


    float _sqrt(float x) {
        if (x < 0) {
            return -1; // Return -1 for invalid input (negative number)
        }
        // Improved guesses for sqrt based on the range of x
        float guess;
        if (x >= 0.5 && x <= 1) {              // For values close to 1
            guess = 0.5 * x;
        } else if (x < 2.1 && x > 1) {       // For small positive values
            guess = 1.4;
        } else if (x < 0.5) {                    // General case for intermediate values
            guess = x;
        } else {                                // For large values
            guess = x / 2;
        }

        float epsilon = 0.00001; // Precision threshold
        int maxIterations = 20;
        int iterations = 0;

        while (iterations < maxIterations) {
            float newGuess = (guess + x / guess) / 2;
            if (_abs(newGuess - guess) < epsilon) {
                break;
            }
            guess = newGuess;
            iterations = iterations + 1;
        }

        return guess;
    }

    float _abs(float x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    float _readjustAngle(float a) { //  readjusts the angle to be between -π && π
        float pi = 3.14159265358979323846264;
        float twoPi = 6.283185307179586476925286; // 2π

        while (a < -pi) {
            a = a + twoPi;
        }
        while (a > pi) {
            a = a - twoPi;
        }

        return a;
    }

    float sin(float f) {
        f = _readjustAngle(f);
        float sum = f;
        float term;
        int n = 1;
        int nbTerms = 6;

        if (f >= 2.356194490192345) {  //  for f > 3π/4, use sin(f) = -sin(f - π)
            
            float res = -sin(f - 3.14159265358979323846264);
            return res;

        } else if(f > 0.78539816339744830961 && f < 2.356194490192345) {  //  for pi/4 < f < 3π/4, use sin(f) = cos(f - pi/2)

            float res = cos(f - 1.570796326794896619231321691639);
            return res;
            
        } else if (f >= 0 && f <= 0.78539816339744830961566084581988) {  //  for 0 <= f <= π/4, use Taylor Series centered in 0  
            
            while (n <= nbTerms) {
            term = _power(f, 2*n + 1) / _factorial(2*n + 1);
            if (n%2 == 1) {
                sum = sum - term;
            } else {
                sum = sum + term;
            }
            n = n + 1;
            }
            return sum;

        } else if (f <= -2.356194490192345) {  //  for f < -3π/4, use sin(f) = -sin(f + π)
            
            float res = -sin(f + 3.14159265358979323846264);
            return res;

        } else if(f < -0.78539816339744830961 && f > -2.356194490192345) {  //  for -pi/4 > f > -3π/4, use sin(f) = -cos(f + pi/2)

            float res = -cos(f + 1.570796326794896619231321691639);
            return res;
            
        } else if (f < 0 && f >= -0.78539816339744830961566084581988) {  //  for 0 > f >= -π/4, sin(f) = -sin(-f)
            
            float res = -sin(-f);
            return res;

        }

        
    }

    float cos(float f) {
        f = _readjustAngle(f);
        float sum = 1;
        float term;
        int n = 1;
        int nbTerms = 6;


        if (f > 2.356194490192345) {  //  for f > 3π/4, use cos(f) = -cos(f - π)
            
            float res = -cos(f - 3.14159265358979323846264);
            return res;

        } else if(f > 0.78539816339744830961 && f < 2.356194490192345) {  //  for pi/4 < f < 3π/4, use cos(f) = -sin(f - pi/2)

            float res = -sin(f - 1.570796326794896619231321691639);
            return res;
            
        } else if (f >= 0 && f <= 0.78539816339744830961566084581988) {  //  for 0 <= f <= π/4, use Taylor Series centered in 0  
            
            while (n <= nbTerms) {
                term = _power(f, 2*n) / _factorial(2*n);
                if (n%2 == 1) {
                    sum = sum - term;
                } else {
                    sum = sum + term;
                }
                n = n + 1;
            }
            return sum;

        } else if (f < -2.356194490192345) {  //  for f < -3π/4, use cos(f) = -cos(f + π)
            
            float res = -cos(f + 3.14159265358979323846264);
            return res;

        } else if(f < -0.78539816339744830961 && f > -2.356194490192345) {  //  for -pi/4 > f > -3π/4, use cos(f) = sin(f + pi/2)

            float res = sin(f + 1.570796326794896619231321691639);
            return res;
            
        } else if (f < 0 && f >= -0.78539816339744830961566084581988) {  //  for 0 > f >= -π/4, cos(f) = cos(-f)
            
            float res = cos(-f);
            return res;

        }
        
    }

    float asin(float f) {

        if (f > 1 || f < -1) {
            return -1000; //  
        } else {
            
            if (f > -0.6 && f < 0.6) {   //  for small values of f, use Taylor series
                if (f < 0) {
                    float sum = -1*f;
                    float term;
                    int n = 1;
                    int nbTerms = 12;

                    while (n <= nbTerms) {  //  controls the precision
                        term = _power(f, 2*n + 1);
                        term = (_factOdd(n)/_factEven(n))*(term/(2*n + 1));
                        sum = sum + term;
                        n = n + 1;
                    }

                    return -1*sum;
                }

                float sum = f;
                float term;
                int n = 1;
                int nbTerms = 12;

                while (n <= nbTerms) {  //  controls the precision
                    term = _power(f, 2*n + 1);
                    term = (_factOdd(n)/_factEven(n))*(term/(2*n + 1));
                    sum = sum + term;
                    n = n + 1;
                }
                
                return sum;

            } else {   //  for large values of f, use the polynomial approximation
                if (f < 0) {   // asin(-f) = -asin(f)
                    
                    float a0 = 1.5707288;
                    float a1 = -0.2121144;
                    float a2 = 0.0742610;
                    float a3 = -0.0187293;
                    float x = -1*f;

                    
                    float sqrtValue = sqrt(1 - x);

                    
                    float poly = a0 + a1 * x + a2 * power(x, 2) + a3 * power(x, 3);

                    return -1*(1.570796326794896619231321691639 - sqrtValue * poly); // π/2 - sqrt(1 - f) * polynomial

                } else {
                    
                    float a0 = 1.5707288;
                    float a1 = -0.2121144;
                    float a2 = 0.0742610;
                    float a3 = -0.0187293;

                    
                    float sqrtValue = sqrt(1 - f);

                    
                    float poly = a0 + a1 * f + a2 * power(f, 2) + a3 * power(f, 3);

                    return (1.570796326794896619231321691639 - sqrtValue * poly); // π/2 - sqrt(1 - f) * polynomial
                }    
            }
        }
    }


    float atan(float f) {
        if (f > 0){
            if (f < 0.75){
                float sum = x; // First term in the series
                float term;
                int n = 1;
                int nbTerms = 12; // Number of terms to control precision

                while (n <= nbTerms) {
                    term = power(x, 2 * n + 1) / (2 * n + 1);
                    if (n % 2 == 1) {
                        sum = sum - term; // Subtract for odd terms
                    } else {
                        sum = sum + term; // Add for even terms
                    }
                    n = n + 1;
                }

                return sum;

            } else if (f < 3){

                return asin(_sqrt(_power(f, 2) / (_power(f, 2) + 1)));

            } else if (f >= 3){

                float sum = 1.5707963; // π/2
                float term;
                int n = 0;
                int nbTerms = 6; // Number of terms to control precision

                while (n < nbTerms) {
                    int denominator = 2 * n + 1;
                    term = 1 / (denominator * power(f, denominator));

                    if (n % 2 == 0) {
                        sum = sum - term; // Subtract for even terms
                    } else {
                        sum = sum + term; // Add for odd terms
                    }

                    n = n + 1;
                }

                return sum;
            }
        } else if (f == 0){
            
            return 0;

        } else {

            return -1*atan(-1*f);

        }
    
    }
        // Implementação de float para int bits
    int _floatToIntBits(float x) {
        // Variáveis auxiliares para os componentes do número de ponto flutuante
        int sign;
        int exponent;
        int mantissa;

        if (x == 0) {
            return 0; // Representação de 0 em bits
        }

        // Determinar o sinal
        if (x < 0) {
            sign = 1;
            x = _abs(x); // Trabalhar apenas com o valor absoluto
        } else {
            sign = 0;
        }

        // Determinar o expoente e a mantissa
        exponent = 127; // Valor inicial do expoente no formato IEEE 754
        while (x >= 2.0) {
            x = x / 2.0;
            exponent = exponent + 1;
        }
        while (x < 1.0) {
            x = x * 2.0;
            exponent = exponent - 1;
        }

        // Remover o bit implícito "1" e calcular a mantissa
        x = x - 1.0;
        mantissa = 0;
        for (int i = 0; i < 23; i = i + 1) {
            x = x * 2.0;
            if (x >= 1.0) {
                mantissa = mantissa | (1 << (22 - i));
                x = x - 1.0;
            }
        }

        // Combinar os componentes para formar o número final em bits
        return (sign << 31) | (exponent << 23) | mantissa;
    }

    // Implementação de int bits para float
    float _intBitsToFloat(int bits) {
        if (bits == 0) {
            return 0.0; // Representação de 0
        }

        // Extrair os componentes do número de ponto flutuante
        int sign = (bits >> 31) & 1;
        int exponent = (bits >> 23) & 0xFF;
        int mantissa = bits & 0x7FFFFF;

        // Reconstruir o número em ponto flutuante
        float result = 1.0; // Inclui o bit implícito "1"
        for (int i = 0; i < 23; i = i + 1) {
            if ((mantissa & (1 << (22 - i))) != 0) {
                result = result + _power(2.0, -(i + 1));
            }
        }

        result = result * _power(2.0, exponent - 127); // Aplicar o expoente

        // Aplicar o sinal
        if (sign == 1) {
            result = -result;
        }

        return result;
    }

    // Método atualizado para calcular o ULP (Unidade de Menor Precisão)
    float ulp(float x) {
        if (x == 0) {
            return 1.40129846e-45; // Valor mínimo para float (Float.MIN_VALUE em Java)
        }

        // Converter o número para bits e calcular o próximo valor
        int bits = _floatToIntBits(x);
        int nextBits = x > 0 ? bits + 1 : bits - 1;
        float nextValue = _intBitsToFloat(nextBits);

        // Retornar a diferença entre o valor atual e o próximo
        return _abs(nextValue - x);
    }
    
}


// End of Deca Math library
